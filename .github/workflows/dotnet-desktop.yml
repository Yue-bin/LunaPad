# 工作流名称
name: .NET Core Desktop Build and Release

# 触发工作流的事件
on:
  # 1. 当代码推送到 main 分支时
  push:
    branches: [ "main" ]
    # 2. 当创建了 'v*.*.*' 格式的 tag 时 (例如 v1.0.0, v1.2.3)
    tags:
      - 'v*.*.*'
  # 3. 当有到 main 分支的 Pull Request 时
  pull_request:
    branches: [ "main" ]
    
  # 4. 允许手动触发
  workflow_dispatch:

jobs:
  build-and-publish:
    # 始终在最新的 Windows 环境上运行
    runs-on: windows-latest

    # 环境变量，请根据你的项目进行修改
    env:
      # 需要发布成 exe 的项目文件路径
      PROJECT_PATH: LunaPad.csproj
      # 你的应用程序名称（不含.exe），用于重命名输出文件
      PROJECT_NAME: LunaPad
      # 使用的 .NET 版本
      DOTNET_VERSION: 9.0.x # 建议与你项目使用的 .NET 版本保持一致

    steps:
    # 步骤 1: 检出代码
    # fetch-depth: 0 会获取所有历史记录，这对于从 tag 中提取版本号很重要
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 步骤 2: 安装指定版本的 .NET SDK
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # 步骤 3: 还原 NuGet 包
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    # 步骤 4: 构建项目
    - name: Build project
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    # 步骤 5: 运行单元测试 (建议取消注释并确保有测试项目)
    # - name: Execute unit tests
    #  run: dotnet test --no-build --verbosity normal

    # 步骤 6: 发布应用程序
    # - /p:PublishSingleFile=true  -> 将所有内容打包到一个 .exe 文件中
    # - /p:PublishReadyToRun=true -> 预编译代码以提高启动速度
    # - -r win-x64 -> 指定目标平台，对于单文件发布是必需的
    - name: Publish application
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./publish -r win-x64 /p:PublishSingleFile=true /p:PublishReadyToRun=true

    # 步骤 7: 重命名可执行文件
    - name: Rename executable
      run: ren ./publish/${{ env.PROJECT_NAME }}.exe ${{ env.PROJECT_NAME }}-${{ github.ref_name }}.exe
      # 仅在创建 tag 时运行此步骤，为 exe 添加版本号
      if: startsWith(github.ref, 'refs/tags/')

    # 步骤 8: 上传构建产物 (用于 Push 和 Pull Request)
    # 这会将 ./publish 目录下的所有文件打包成一个 zip，并命名为 "Windows-App-Build"
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      if: github.ref_type != 'tag' # 仅在不是 tag 推送时运行
      with:
        name: Windows-App-Build
        path: ./publish/*

    # 步骤 9: 创建 GitHub Release (用于 Tag)
    # 当你推送一个 'v*.*.*' 格式的 tag 时，此步骤会自动创建一个 Release
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: github.ref_type == 'tag' # 仅在 tag 推送时运行
      with:
        # Release 的标题会自动设为 tag 的名称 (例如 "v1.0.0")
        # Release 的内容会自动填充从上一个 tag 到当前 tag 的所有 commit message
        generate_release_notes: true
        # 将发布后的 exe 文件上传到这个 Release 中
        files: ./publish/${{ env.PROJECT_NAME }}-${{ github.ref_name }}.exe

